.\" Automatically generated by Pod::Man 2.27 (Pod::Simple 3.28)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{
.    if \nF \{
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "Geo::Leaflet 3"
.TH Geo::Leaflet 3 "2024-12-03" "perl v5.16.3" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Geo::Leaflet \- Generates a Leaflet JavaScript map web page
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&  use Geo::Leaflet;
\&  my $map = Geo::Leaflet\->new;
\&  print $map\->html;
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This package generates a Leaflet JavaScript <https://leafletjs.com/> map web page.
.SH "CONSTRUCTORS"
.IX Header "CONSTRUCTORS"
.SS "new"
.IX Subsection "new"
Returns a map object
.PP
.Vb 5
\&  my $map = Geo::Leaflet\->new(
\&                              id     => "map",
\&                              center => [$lat, $lon],
\&                              zoom   => 13,
\&                             );
.Ve
.SH "MAP PROPERTIES"
.IX Header "MAP PROPERTIES"
.SS "id"
.IX Subsection "id"
Sets and returns the html id of the map.
.PP
Default: \*(L"map\*(R"
.SS "center"
.IX Subsection "center"
Sets and returns the center of the map.
.PP
.Vb 2
\&  $map\->center([$lat, $lon]);
\&  my $center = $map\->center;
.Ve
.PP
Default: [38.2, \-97.2]
.SS "zoom"
.IX Subsection "zoom"
Sets and returns the zoom of the map.
.PP
.Vb 2
\&  $map\->zoom(4.5);
\&  my $zoom = $map\->zoom;
.Ve
.PP
Default: 4.5
.SS "setView"
.IX Subsection "setView"
Sets the center and zoom of the map and returns the map object (i.e., matches leaflet.js interface).
.PP
.Vb 1
\&  $map\->setView([51.505, \-0.09], 13);
.Ve
.SS "width"
.IX Subsection "width"
Sets and returns the percent or pixel width of the map.
.PP
.Vb 3
\&  $map\->width(\*(Aq600px\*(Aq);
\&  $map\->width(\*(Aq100%\*(Aq);
\&  my $width = $map\->width;
.Ve
.PP
Default: 100%
.SS "height"
.IX Subsection "height"
Sets and returns the percent or pixel height of the map.
.PP
.Vb 3
\&  $map\->height(\*(Aq400px\*(Aq);
\&  $map\->height(\*(Aq100%\*(Aq);
\&  my $height = $map\->height;
.Ve
.PP
Default: 100%
.SH "HTML PROPERTIES"
.IX Header "HTML PROPERTIES"
.SS "title"
.IX Subsection "title"
Sets and returns the \s-1HTML\s0 title.
.PP
Default: \*(L"Leaflet Map\*(R"
.SH "TILE LAYER CONSTRUCTOR"
.IX Header "TILE LAYER CONSTRUCTOR"
.SS "tileLayer"
.IX Subsection "tileLayer"
Creates and returns a tileLayer object which is added to the map.
.PP
.Vb 7
\&  $map\->tileLayer(
\&                  url     => \*(Aqhttps://tile.openstreetmap.org/{z}/{x}/{y}.png\*(Aq,
\&                  options => {
\&                    maxZoom     => 19,
\&                    attribution => \*(Aq&copy; <a href="http://www.openstreetmap.org/copyright">OpenStreetMap</a>\*(Aq,
\&                  },
\&                 );
\&
\&  Default: OpenStreetMaps
.Ve
.PP
See: <https://leafletjs.com/reference.html#tilelayer>
.SH "ICON CONSTRUCTORS"
.IX Header "ICON CONSTRUCTORS"
.SS "icon"
.IX Subsection "icon"
Represents an icon to provide when creating a marker.
.PP
.Vb 12
\&  my $icon = $map\->icon(
\&                        name    => "my_icon", #must be a valid JavaScript variable name
\&                        options => {
\&                                    iconUrl      => "my\-icon.png",
\&                                    iconSize     => [38, 95],
\&                                    iconAnchor   => [22, 94],
\&                                    popupAnchor  => [\-3, \-76],
\&                                    shadowUrl    => "my\-icon\-shadow.png",
\&                                    shadowSize   => [68, 95],
\&                                    shadowAnchor => [22, 94],
\&                                   }
\&                       );
.Ve
.PP
See: <https://leafletjs.com/reference.html#icon>
.SS "divIcon"
.IX Subsection "divIcon"
Represents a lightweight icon for markers that uses a simple `div` element instead of an image.
.PP
Font Awesome with defaults
.PP
.Vb 1
\&  my $icon = $map\->divIcon(icon_name => "bicycle");
.Ve
.PP
Font Awesome with tweaks
.PP
.Vb 7
\&  my $icon = $map\->divIcon(
\&                           icon_name      => "bicycle",
\&                           icon_font_size => 22,
\&                           options => {
\&                                       iconAnchor => [11,11],
\&                                      },
\&                          );
.Ve
.PP
Other \s-1CSS\s0 options
.PP
.Vb 6
\&  my $icon = $map\->divIcon(
\&                        options => {
\&                                    html  => \*(Aq<i class="fa fa\-map\-marker", style="font\-size:48px"></i>\*(Aq,
\&                                    iconAnchor => [13, 44],
\&                                   }
\&                       );
.Ve
.PP
See: https://leafletjs.com/reference.html#divicon
.SH "MAP OBJECT CONSTRUCTORS"
.IX Header "MAP OBJECT CONSTRUCTORS"
.SS "marker"
.IX Subsection "marker"
Adds a marker object to the map and returns a reference to the marker object.
.PP
.Vb 1
\&  $map\->marker(lat=>$lat, lon=>$lon);
.Ve
.PP
See: <https://leafletjs.com/reference.html#marker>
.SS "polyline"
.IX Subsection "polyline"
Adds a polyline object to the map and returns a reference to the polyline object.
.PP
.Vb 2
\&  my $latlngs = [[$lat, $lon], ...]
\&  $map\->polyline(coordinates=>$latlngs, options=>{});
.Ve
.PP
See: <https://leafletjs.com/reference.html#polyline>
.SS "polygon"
.IX Subsection "polygon"
Adds a polygon object to the map and returns a reference to the polygon object.
.PP
.Vb 2
\&  my $latlngs = [[$lat, $lon], ...]
\&  $map\->polygon(coordinates=>$latlngs, options=>{});
.Ve
.PP
See: <https://leafletjs.com/reference.html#polygon>
.SS "rectangle"
.IX Subsection "rectangle"
Adds a rectangle object to the map and returns a reference to the rectangle object.
.PP
.Vb 5
\&  $map\->rectangle(llat       => $llat,
\&                  llon       => $llon,
\&                  ulat       => $ulat,
\&                  ulon       => $ulon,
\&                  options => {});
.Ve
.PP
See: <https://leafletjs.com/reference.html#rectangle>
.SS "circle"
.IX Subsection "circle"
Adds a circle object to the map and returns a reference to the circle object.
.PP
.Vb 1
\&  $map\->circle(lat=>$lat, lon=>$lon, radius=>$radius, options=>{});
.Ve
.PP
See: <https://leafletjs.com/reference.html#circle>
.SH "METHODS"
.IX Header "METHODS"
.SS "html"
.IX Subsection "html"
.SS "html_head_links"
.IX Subsection "html_head_links"
.SS "html_head_script"
.IX Subsection "html_head_script"
.SS "html_head_style"
.IX Subsection "html_head_style"
.SS "html_body_div"
.IX Subsection "html_body_div"
.SS "html_body_script"
.IX Subsection "html_body_script"
.SS "html_body_script_map"
.IX Subsection "html_body_script_map"
.SS "html_body_script_contents"
.IX Subsection "html_body_script_contents"
.SH "DATA ACCESSORS"
.IX Header "DATA ACCESSORS"
.SS "map_objects"
.IX Subsection "map_objects"
Returns the array reference of map objects to be added to the map
.PP
.Vb 1
\&  $map\->map_objects($icon);
.Ve
.SS "icon_objects"
.IX Subsection "icon_objects"
Returns the array reference of icon objects to be added to the map
.PP
.Vb 1
\&  $map\->icon_objects($icon);
.Ve
.SS "icon_sets"
.IX Subsection "icon_sets"
Returns the array reference of icon sets to be added to the map
.SH "OBJECT ACCESSORS"
.IX Header "OBJECT ACCESSORS"
.SS "\s-1HTML\s0"
.IX Subsection "HTML"
Returns an <HTML:Tiny> object to generate \s-1HTML.\s0
.SS "\s-1JSON\s0"
.IX Subsection "JSON"
Returns a \s-1JSON::XS\s0 object to generate \s-1JSON.\s0
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Geo::Google::StaticMaps::V2
https://leafletjs.com/
.SH "AUTHOR"
.IX Header "AUTHOR"
Michael R. Davis
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2024 by Michael R. Davis
.PP
\&\s-1MIT LICENSE\s0
